gg_corr_raw = res[[1]]
corr_line_raw = res[[2]]
gg_corr_norm = plot_corr(full_df, use_normalized=T, title="Normalized Counts Correlation")
gg_corr_norm = res[[1]]
corr_line_norm = res[[2]]
# plot ribodiff expression results
gg_volcano = plot_volcano(norm_counts_df, gene_names_df, ribodiff_df, translate_df)
# compare with old ribodiff results
old_ribodiff_df = data.frame(fread(old_ribodiff_file))
colnames(old_ribodiff_df)[1] = "gene_id"
old_ribodiff_df = old_ribodiff_df[,1:7]
old_ribodiff_df = old_ribodiff_df[old_ribodiff_df$pval != "NaN",]
old_ribodiff_df = old_ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")]
colnames(old_ribodiff_df)[2:3] = c("old_padj", "old_log2FC_TE.DrugTreated.vs.Control.")
compare_df = merge(ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")], old_ribodiff_df)
compare_df = translate_table(compare_df, translate_df)
outfile = paste(outdir, "compare_padj_with_old_normalization.tsv", sep="")
write.table(compare_df, outfile, sep="\t", quote = F, row.names = F)
# write them out
outfile = paste(outdir, "qc_plots_pca.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_pca, width = 10, height=10)
outfile = paste(outdir, "qc_plots_boxplot.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_boxplot, width = 10, height=10)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_raw.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_normalized.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_raw.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_normalized.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_volcano.pdf", sep="")
ggsave(filename = outfile, plot = gg_volcano, width = 12, height=10)
}
table_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15.txt"
ribodiff_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_15_85.txt"
old_ribodiff_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_15_85.txt"
translate_file = "~/Documents/projects/guido/mm10_gene_trans_name.txt"
outdir = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/"
library_size_xp = data.frame(Samples = c("Sample_T0_1_FP",   "Sample_T0_2_FP",   "Sample_T0_3_FP",
"Sample_2hr_2_FP",  "Sample_2hr_3_FP",  "Sample_T0_1_RNA",
"Sample_T0_2_RNA",  "Sample_T0_3_RNA",  "Sample_2hr_1_RNA",
"Sample_2hr_2_RNA", "Sample_2hr_3_RNA"),
library_size = c(0.7,  0.9,     1,     1.4,  1.5,
1.576,  1.006,  1.558,  0.621,  0.83,  0.994))
run_qc_analysis(table_file, ribodiff_file, old_ribodiff_file, translate_file, outdir, library_size_xp)
head(new_rna_df)
raw_counts_df = data.frame(fread(table_file))
colnames(raw_counts_df)[1] = "gene_id"
translate_df = data.frame(fread(translate_file))
colnames(translate_df) = c("gene_id", "gene_transcript", "gene_name")
translate_df = unique(translate_df[,c("gene_id", "gene_name")])
ribodiff_df = data.frame(fread(ribodiff_file))
colnames(ribodiff_df)[1] = "gene_id"
ribodiff_df = ribodiff_df[,1:7]
ribodiff_df = ribodiff_df[ribodiff_df$pval != "NaN",]
# write out the translated file
outfile = paste(outdir, "result_85_names.txt", sep="")
ribodiff_df_trans = translate_table(ribodiff_df, translate_df)
ribodiff_df_trans = ribodiff_df_trans[order(ribodiff_df_trans$padj, decreasing=F), ]
write.table(ribodiff_df_trans, outfile, sep="\t", quote = F, row.names = F)
# only get counts for genes tested
raw_counts_df = raw_counts_df[raw_counts_df$gene %in% ribodiff_df$gene,]
# count_type definition
count_type_df = data.frame(Samples = c("Sample_T0_1_RP",   "Sample_T0_2_RP",   "Sample_T0_3_RP",
"Sample_2hr_2_RP",  "Sample_2hr_3_RP",  "Sample_T0_1_RNA",
"Sample_T0_2_RNA",  "Sample_T0_3_RNA",  "Sample_2hr_1_RNA",
"Sample_2hr_2_RNA", "Sample_2hr_3_RNA"),
sample_ids = c("Sample_T0_1",   "Sample_T0_2",   "Sample_T0_3",
"Sample_2hr_2",  "Sample_2hr_3",  "Sample_T0_1",
"Sample_T0_2",  "Sample_T0_3",  "Sample_2hr_1",
"Sample_2hr_2", "Sample_2hr_3"),
count_type = c(rep("FP",5), rep("RNA", 6)),
condition = c(rep("T0", 3), rep("2hr", 2), rep("T0", 3), rep("2hr", 3)))
# normalize
norm_counts_df = normalize_counts(raw_counts_df, library_size)
library_size = library_size_xp
# normalize
norm_counts_df = normalize_counts(raw_counts_df, library_size)
ribodiff_file
old_ribodiff_file
table_file
# plot PCA
gg_pca_raw_rp = plot_pca(raw_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Raw RP Counts")
gg_pca_norm_rp = plot_pca(norm_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Normalized RP Counts")
gg_pca_raw_rna = plot_pca(raw_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Raw RNA Counts")
gg_pca_norm_rna = plot_pca(norm_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Normalized RNA Counts")
gg_all_pca = grid.arrange(gg_pca_raw_rp, gg_pca_norm_rp, gg_pca_raw_rna, gg_pca_norm_rna, ncol=2)
head(raw_counts_df)
count_type_df
head(raw_counts_df)
# count_type definition
count_type_df = data.frame(Samples = c("Sample_T0_1_FP",   "Sample_T0_2_FP",   "Sample_T0_3_FP",
"Sample_2hr_2_FP",  "Sample_2hr_3_FP",  "Sample_T0_1_RNA",
"Sample_T0_2_RNA",  "Sample_T0_3_RNA",  "Sample_2hr_1_RNA",
"Sample_2hr_2_RNA", "Sample_2hr_3_RNA"),
sample_ids = c("Sample_T0_1",   "Sample_T0_2",   "Sample_T0_3",
"Sample_2hr_2",  "Sample_2hr_3",  "Sample_T0_1",
"Sample_T0_2",  "Sample_T0_3",  "Sample_2hr_1",
"Sample_2hr_2", "Sample_2hr_3"),
count_type = c(rep("FP",5), rep("RNA", 6)),
condition = c(rep("T0", 3), rep("2hr", 2), rep("T0", 3), rep("2hr", 3)))
# normalize
norm_counts_df = normalize_counts(raw_counts_df, library_size)
# plot PCA
gg_pca_raw_rp = plot_pca(raw_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Raw RP Counts")
gg_pca_norm_rp = plot_pca(norm_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Normalized RP Counts")
gg_pca_raw_rna = plot_pca(raw_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Raw RNA Counts")
gg_pca_norm_rna = plot_pca(norm_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Normalized RNA Counts")
gg_all_pca = grid.arrange(gg_pca_raw_rp, gg_pca_norm_rp, gg_pca_raw_rna, gg_pca_norm_rna, ncol=2)
# plot expression boxplots
full_df = get_melted_merged_table(raw_counts_df, norm_counts_df, count_type_df)
ribo_rna_boxplot_raw = plot_boxplot(full_df, col_interest="raw_count", title="Raw Counts")
ribo_rna_boxplot_norm = plot_boxplot(full_df, col_interest="norm_count", title="Normalized Counts")
gg_all_boxplot = grid.arrange(ribo_rna_boxplot_raw, ribo_rna_boxplot_norm, ncol=1)
# plot correlations between sample types
res = plot_corr(full_df, use_normalized=F, title="Raw Counts Correlation")
gg_corr_raw = res[[1]]
corr_line_raw = res[[2]]
gg_corr_norm = plot_corr(full_df, use_normalized=T, title="Normalized Counts Correlation")
gg_corr_norm = res[[1]]
corr_line_norm = res[[2]]
# plot ribodiff expression results
gg_volcano = plot_volcano(norm_counts_df, gene_names_df, ribodiff_df, translate_df)
# compare with old ribodiff results
old_ribodiff_df = data.frame(fread(old_ribodiff_file))
colnames(old_ribodiff_df)[1] = "gene_id"
old_ribodiff_df = old_ribodiff_df[,1:7]
old_ribodiff_df = old_ribodiff_df[old_ribodiff_df$pval != "NaN",]
old_ribodiff_df = old_ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")]
colnames(old_ribodiff_df)[2:3] = c("old_padj", "old_log2FC_TE.DrugTreated.vs.Control.")
# plot ribodiff expression results
gg_volcano = plot_volcano(norm_counts_df, gene_names_df, ribodiff_df, translate_df)
head(norm_counts_df)
plot_volcano <- function(norm_counts_df, gene_names_df, ribodiff_df, translate_df){
ribodiff_df_trans = translate_table(ribodiff_df, translate_df)
mean_expr_RP_T0 = rowMeans(norm_counts_df[,c("Sample_T0_1_FP",   "Sample_T0_2_FP",   "Sample_T0_3_FP")])
mean_expr_RP_2hr = rowMeans(norm_counts_df[,c("Sample_2hr_2_FP",  "Sample_2hr_3_FP")])
mean_expr_RP = data.frame(gene_id = norm_counts_df$gene, T0_mean = mean_expr_RP_T0, hr2_mean = mean_expr_RP_2hr)
mean_expr_RP = merge(mean_expr_RP, ribodiff_df_trans)
# add plotting columns
mean_expr_RP$hist_color = "Nonsignificant"
mean_expr_RP$hist_color[mean_expr_RP$padj < 0.1 & mean_expr_RP$log2FC_TE.DrugTreated.vs.Control. > 0] = "Pos. Significant"
mean_expr_RP$hist_color[mean_expr_RP$padj < 0.1 & mean_expr_RP$log2FC_TE.DrugTreated.vs.Control. < 0] = "Neg. Significant"
mean_expr_RP$hist_color = factor(mean_expr_RP$hist_color, levels=c("Neg. Significant", "Nonsignificant", "Pos. Significant"))
mean_expr_RP$gene_name[mean_expr_RP$padj > 0.1] = ""
gg_T0_expr = ggplot(mean_expr_RP, aes(x=log2FC_TE.DrugTreated.vs.Control., y=-log10(padj), color=T0_mean>5, label=gene_name)) +
geom_point() + geom_hline(yintercept=1, color="red") + geom_label_repel() +
theme_bw() + scale_color_brewer(palette="Dark2") + labs(color = "Mean Normalized\nRP counts T0 > 5") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlim(c(-9,9)) + ylim(c(0, 3.5)) +
ggtitle("RiboDiff Result") + xlab("TE log2FC T0 vs 2hr")
gg_2hr_expr = ggplot(mean_expr_RP, aes(x=log2FC_TE.DrugTreated.vs.Control., y=-log10(padj), color=hr2_mean>5, label=gene_name)) +
geom_point() + geom_hline(yintercept=1, color="red") + geom_label_repel() +
theme_bw() + scale_color_brewer(palette="Dark2") + labs(color = "Mean Normalized\nRP counts 2HR > 5") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlim(c(-9,9)) + ylim(c(0, 3.5)) +
ggtitle("RiboDiff Result") + xlab("TE log2FC T0 vs 2hr")
gg_expr = ggplot(mean_expr_RP, aes(x=log2FC_TE.DrugTreated.vs.Control., y=-log10(padj), color=-log10(padj), label=gene_name)) +
geom_point() + geom_hline(yintercept=1, color="red") + geom_label_repel() +
theme_bw() + scale_color_gradient2(midpoint=1, low="black", mid="blue", high="red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlim(c(-9,9)) + ylim(c(0, 3.5)) +
ggtitle("RiboDiff Result") + xlab("TE log2FC T0 vs 2hr")
gg_log2FC_expr = ggplot(mean_expr_RP, aes(x=log2FC_TE.DrugTreated.vs.Control., fill=hist_color)) +
geom_histogram(position = "identity", bins = 100) +
theme_bw() + scale_fill_manual(values=c("#56B4E9", "#999999", "#E69F00")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("RiboDiff Result") + xlab("TE log2FC T0 vs 2hr")
gg_all = grid.arrange(gg_T0_expr, gg_2hr_expr, gg_expr, gg_log2FC_expr, ncol=2)
return(gg_all)
}
# plot ribodiff expression results
gg_volcano = plot_volcano(norm_counts_df, gene_names_df, ribodiff_df, translate_df)
# compare with old ribodiff results
old_ribodiff_df = data.frame(fread(old_ribodiff_file))
colnames(old_ribodiff_df)[1] = "gene_id"
old_ribodiff_df = old_ribodiff_df[,1:7]
old_ribodiff_df = old_ribodiff_df[old_ribodiff_df$pval != "NaN",]
old_ribodiff_df = old_ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")]
colnames(old_ribodiff_df)[2:3] = c("old_padj", "old_log2FC_TE.DrugTreated.vs.Control.")
compare_df = merge(ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")], old_ribodiff_df)
compare_df = translate_table(compare_df, translate_df)
outfile = paste(outdir, "compare_padj_with_old_normalization.tsv", sep="")
write.table(compare_df, outfile, sep="\t", quote = F, row.names = F)
# write them out
outfile = paste(outdir, "qc_plots_pca.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_pca, width = 10, height=10)
outfile = paste(outdir, "qc_plots_boxplot.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_boxplot, width = 10, height=10)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_raw.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_normalized.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_raw.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_normalized.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_volcano.pdf", sep="")
ggsave(filename = outfile, plot = gg_volcano, width = 12, height=10)
old_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_85_names"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_85_names.tsv"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.tsv"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
run_qc_analysis <- function(table_file, ribodiff_file, old_ribodiff_file, translate_file, outdir, library_size){
raw_counts_df = data.frame(fread(table_file))
colnames(raw_counts_df)[1] = "gene_id"
translate_df = data.frame(fread(translate_file))
colnames(translate_df) = c("gene_id", "gene_transcript", "gene_name")
translate_df = unique(translate_df[,c("gene_id", "gene_name")])
ribodiff_df = data.frame(fread(ribodiff_file))
colnames(ribodiff_df)[1] = "gene_id"
ribodiff_df = ribodiff_df[,1:7]
ribodiff_df = ribodiff_df[ribodiff_df$pval != "NaN",]
# write out the translated file
outfile = paste(outdir, "result_85_names.txt", sep="")
ribodiff_df_trans = translate_table(ribodiff_df, translate_df)
ribodiff_df_trans = ribodiff_df_trans[order(ribodiff_df_trans$padj, decreasing=F), ]
write.table(ribodiff_df_trans, outfile, sep="\t", quote = F, row.names = F)
# only get counts for genes tested
raw_counts_df = raw_counts_df[raw_counts_df$gene %in% ribodiff_df$gene,]
# count_type definition
count_type_df = data.frame(Samples = c("Sample_T0_1_FP",   "Sample_T0_2_FP",   "Sample_T0_3_FP",
"Sample_2hr_2_FP",  "Sample_2hr_3_FP",  "Sample_T0_1_RNA",
"Sample_T0_2_RNA",  "Sample_T0_3_RNA",  "Sample_2hr_1_RNA",
"Sample_2hr_2_RNA", "Sample_2hr_3_RNA"),
sample_ids = c("Sample_T0_1",   "Sample_T0_2",   "Sample_T0_3",
"Sample_2hr_2",  "Sample_2hr_3",  "Sample_T0_1",
"Sample_T0_2",  "Sample_T0_3",  "Sample_2hr_1",
"Sample_2hr_2", "Sample_2hr_3"),
count_type = c(rep("FP",5), rep("RNA", 6)),
condition = c(rep("T0", 3), rep("2hr", 2), rep("T0", 3), rep("2hr", 3)))
# normalize
norm_counts_df = normalize_counts(raw_counts_df, library_size)
######################
# now make plots
######################
# plot PCA
gg_pca_raw_rp = plot_pca(raw_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Raw RP Counts")
gg_pca_norm_rp = plot_pca(norm_counts_df, count_type_df, count_type="FP", cond_vec=c(rep("T0", 3), rep("2hr", 2)), title_text="PCA Normalized RP Counts")
gg_pca_raw_rna = plot_pca(raw_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Raw RNA Counts")
gg_pca_norm_rna = plot_pca(norm_counts_df, count_type_df, count_type="RNA", cond_vec=c(rep("T0", 3), rep("2hr", 3)), title_text="PCA Normalized RNA Counts")
gg_all_pca = grid.arrange(gg_pca_raw_rp, gg_pca_norm_rp, gg_pca_raw_rna, gg_pca_norm_rna, ncol=2)
# plot expression boxplots
full_df = get_melted_merged_table(raw_counts_df, norm_counts_df, count_type_df)
ribo_rna_boxplot_raw = plot_boxplot(full_df, col_interest="raw_count", title="Raw Counts")
ribo_rna_boxplot_norm = plot_boxplot(full_df, col_interest="norm_count", title="Normalized Counts")
gg_all_boxplot = grid.arrange(ribo_rna_boxplot_raw, ribo_rna_boxplot_norm, ncol=1)
# plot correlations between sample types
res = plot_corr(full_df, use_normalized=F, title="Raw Counts Correlation")
gg_corr_raw = res[[1]]
corr_line_raw = res[[2]]
gg_corr_norm = plot_corr(full_df, use_normalized=T, title="Normalized Counts Correlation")
gg_corr_norm = res[[1]]
corr_line_norm = res[[2]]
# plot ribodiff expression results
gg_volcano = plot_volcano(norm_counts_df, gene_names_df, ribodiff_df, translate_df)
# compare with old ribodiff results
old_ribodiff_df = data.frame(fread(old_ribodiff_file))
colnames(old_ribodiff_df)[1] = "gene_id"
old_ribodiff_df = old_ribodiff_df[,1:7]
old_ribodiff_df = old_ribodiff_df[old_ribodiff_df$pval != "NaN",]
old_ribodiff_df = old_ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")]
colnames(old_ribodiff_df)[2:3] = c("old_padj", "old_log2FC_TE.DrugTreated.vs.Control.")
compare_df = merge(ribodiff_df[,c("gene_id", "padj", "log2FC_TE.DrugTreated.vs.Control.")], old_ribodiff_df)
compare_df = translate_table(compare_df, translate_df)
outfile = paste(outdir, "compare_padj_with_old_normalization.tsv", sep="")
write.table(compare_df, outfile, sep="\t", quote = F, row.names = F)
# write them out
outfile = paste(outdir, "qc_plots_pca.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_pca, width = 10, height=10)
outfile = paste(outdir, "qc_plots_boxplot.pdf", sep="")
ggsave(filename = outfile, plot = gg_all_boxplot, width = 10, height=10)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_raw.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_normalized.pdf", sep="")
ggsave(filename = outfile, plot = gg_corr_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_raw.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_raw, width = 12, height=12)
outfile = paste(outdir, "qc_plots_RNA_RP_corr_line_normalized.pdf", sep="")
ggsave(filename = outfile, plot = corr_line_norm, width = 12, height=12)
outfile = paste(outdir, "qc_plots_volcano.pdf", sep="")
ggsave(filename = outfile, plot = gg_volcano, width = 12, height=10)
}
table_file = "~/Documents/projects/guido/xpress_tables/transcript_xpressFP_usualRNA_filtered_table_15.txt"
ribodiff_file = "~/Documents/projects/guido/xpress_tables/transcript_xpressFP_usualRNA_filtered_table_15/result_15_85.txt"
old_ribodiff_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_15_85.txt"
translate_file = "~/Documents/projects/guido/mm10_gene_trans_name.txt"
outdir = "~/Documents/projects/guido/xpress_tables/transcript_xpressFP_usualRNA_filtered_table_15/"
library_size_xp = data.frame(Samples = c("Sample_T0_1_FP",   "Sample_T0_2_FP",   "Sample_T0_3_FP",
"Sample_2hr_2_FP",  "Sample_2hr_3_FP",  "Sample_T0_1_RNA",
"Sample_T0_2_RNA",  "Sample_T0_3_RNA",  "Sample_2hr_1_RNA",
"Sample_2hr_2_RNA", "Sample_2hr_3_RNA"),
library_size = c(0.667,  0.167,     1,     1.25,  1.5,
1.52,  0.974,  1.51,  0.642,  0.855,  1.026))
run_qc_analysis(table_file, ribodiff_file, old_ribodiff_file, translate_file, outdir, library_size_xp)
old_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_previousRNA_filtered_table_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_file = "~/Documents/projects/guido/xpress_out/filtered_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_df = old_rna_df[order(old_rna_df$padj, decreasing=F),]
new_rna_df = new_rna_df[order(new_rna_df$padj, decreasing=F),]
colnames(new_rna_df) = c("geneIDs", "disper_new", "pval_new", "padj_new", "a", "b", "log2FC_new", "c")
colnames(old_rna_df) = c("geneIDs", "disper_old", "pval_old", "padj_old", "a", "b", "log2FC_old", "c")
new_rna_df = new_rna_df[,c(1:4,7)]
old_rna_df = old_rna_df[,c(1:4,7)]
tot_df = merge(new_rna_df, old_rna_df)
head(tot_df)
head(old_rna_df)
old_rna_file = "~/Documents/projects/guido/xpress_out/filtered_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_df = old_rna_df[order(old_rna_df$padj, decreasing=F),]
new_rna_df = new_rna_df[order(new_rna_df$padj, decreasing=F),]
head(old_rna_df)
old_rna_file = "~/Documents/projects/guido/xpress_out/filtered_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_df = old_rna_df[order(old_rna_df$padj, decreasing=F),]
new_rna_df = new_rna_df[order(new_rna_df$padj, decreasing=F),]
colnames(new_rna_df) = c("gene_id", "gene_name", "disp", "pval_new", "padj_new", "a", "b", "log2FC_new", "c")
colnames(old_rna_df) = c("gene_id", "gene_name", "disp", "pval_old", "padj_old", "a", "b", "log2FC_old", "c")
new_rna_df = new_rna_df[,c(1,2,5,8)]
old_rna_df = old_rna_df[,c(1,2,5,8)]
tot_df = merge(new_rna_df, old_rna_df)
head(tot_df)
genes_cutoff_new = new_rna_df$gene_name[new_rna_df$padj_new <= 0.1]
genes_cutoff_old = old_rna_df$gene_name[old_rna_df$padj_old <= 0.1]
setdiff(genes_cutoff_new, genes_cutoff_old)
setdiff(genes_cutoff_old, genes_cutoff_new)
genes_cutoff_new = new_rna_df$gene_name[1:250]
genes_cutoff_old = old_rna_df$gene_name[1:250]
setdiff(genes_cutoff_new, genes_cutoff_old)
setdiff(genes_cutoff_old, genes_cutoff_new)
colnames(new_rna_df) = c("gene_id", "gene_name", "disp", "pval_new", "padj_new", "a", "b", "log2FC_new", "c")
colnames(old_rna_df) = c("gene_id", "gene_name", "disp", "pval_old", "padj_old", "a", "b", "log2FC_old", "c")
new_rna_df = new_rna_df[,c(1,2,5,8)]
old_rna_df = old_rna_df[,c(1,2,5,8)]
old_rna_file = "~/Documents/projects/guido/xpress_out/filtered_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_df = old_rna_df[order(old_rna_df$padj, decreasing=F),]
new_rna_df = new_rna_df[order(new_rna_df$padj, decreasing=F),]
colnames(new_rna_df) = c("gene_id", "gene_name", "disp", "pval_new", "padj_new", "a", "b", "log2FC_new", "c")
colnames(old_rna_df) = c("gene_id", "gene_name", "disp", "pval_old", "padj_old", "a", "b", "log2FC_old", "c")
new_rna_df = new_rna_df[,c(1,2,5,8)]
old_rna_df = old_rna_df[,c(1,2,5,8)]
head(new_rna_df)
old_rna_file = "~/Documents/projects/guido/xpress_out/filtered_15/result_85_names.txt"
new_rna_file = "~/Documents/projects/guido/xpress_tables/cds_xpressFP_xpressRNA_filtered_table_15/result_85_names.txt"
old_rna_df = data.frame(fread(old_rna_file))
new_rna_df = data.frame(fread(new_rna_file))
old_rna_df = old_rna_df[order(old_rna_df$padj, decreasing=F),]
new_rna_df = new_rna_df[order(new_rna_df$padj, decreasing=F),]
head(new_rna_df)
colnames(new_rna_df) = c("gene_id", "gene_name", "disp", "pval_new", "padj_new", "a", "b", "log2FC_new")
colnames(old_rna_df) = c("gene_id", "gene_name", "disp", "pval_old", "padj_old", "a", "b", "log2FC_old")
new_rna_df = new_rna_df[,c(1,2,5,8)]
old_rna_df = old_rna_df[,c(1,2,5,8)]
tot_df = merge(new_rna_df, old_rna_df)
head(tot_df)
genes_cutoff_new = new_rna_df$gene_name[new_rna_df$padj_new <= 0.1]
genes_cutoff_old = old_rna_df$gene_name[old_rna_df$padj_old <= 0.1]
setdiff(genes_cutoff_new, genes_cutoff_old)
setdiff(genes_cutoff_old, genes_cutoff_new)
genes_cutoff_new = new_rna_df$gene_name[1:250]
genes_cutoff_old = old_rna_df$gene_name[1:250]
setdiff(genes_cutoff_new, genes_cutoff_old)
setdiff(genes_cutoff_old, genes_cutoff_new)
genes_cutoff_new
setdiff(genes_cutoff_new, genes_cutoff_old)
genes_cutoff_old
old_rna_df$gene_name[1:255]
subset(tot_df, gene_name %in% union(genes_cutoff_new, genes_cutoff_old))
a = setdiff(genes_cutoff_new, genes_cutoff_old)
b = setdiff(genes_cutoff_old, genes_cutoff_new)
subset(tot_df, gene_name %in% union(a, b))
genes_cutoff_new = new_rna_df$gene_name[new_rna_df$padj_new <= 0.1]
genes_cutoff_old = old_rna_df$gene_name[old_rna_df$padj_old <= 0.1]
a = setdiff(genes_cutoff_new, genes_cutoff_old)
b = setdiff(genes_cutoff_old, genes_cutoff_new)
subset(tot_df, gene_name %in% union(a, b))
genes_cutoff_new = new_rna_df$gene_name[1:250]
genes_cutoff_old = old_rna_df$gene_name[1:250]
a = setdiff(genes_cutoff_new, genes_cutoff_old)
b = setdiff(genes_cutoff_old, genes_cutoff_new)
subset(tot_df, gene_name %in% union(a, b))
source("./r_processing_scripts/utils.R")
write_fasta <- function(seq_df, fasta_filename, max_num){
#write into fasta format
seq_df = seq_df[order(seq_df$padj, decreasing=F), ]
all_genes_table = seq_df[,"gene_name"]
unique_genes = names(which(table(all_genes_table) == 1))
utr5_fasta_filename = paste(fasta_filename, "_utr5.fasta", sep="")
utr3_fasta_filename = paste(fasta_filename, "_utr3.fasta", sep="")
# utr5 first
for(row_idx in 1:max_num){
if(!is.na(seq_df[row_idx,"utr5_length"]) &
seq_df[row_idx,"utr5_length"] < 50000 &
seq_df[row_idx,"utr5_length"] > 8 &
(seq_df[row_idx,"gene_name"] %in% unique_genes)){
curr_str = paste(">", seq_df[row_idx,"gene_name"], "\n", seq_df[row_idx,"utr5"], sep="")
if(row_idx == 1){
write(curr_str,file=utr5_fasta_filename,append=FALSE)
}else{
write(curr_str,file=utr5_fasta_filename,append=TRUE)
}
}
}
# utr3 now
for(row_idx in 1:max_num){
if(!is.na(seq_df[row_idx,"utr3_length"]) &
seq_df[row_idx,"utr3_length"] < 50000 &
seq_df[row_idx,"utr3_length"] > 8 &
(seq_df[row_idx,"gene_name"] %in% unique_genes)){
curr_str = paste(">", seq_df[row_idx,"gene_name"], "\n", seq_df[row_idx,"utr3"], sep="")
if(row_idx == 1){
write(curr_str,file=utr3_fasta_filename,append=FALSE)
}else{
write(curr_str,file=utr3_fasta_filename,append=TRUE)
}
}
}
}
calc_cutoff_hypergeo <- function(total_genes, ires_genes, ranked_genes, samp_size){
# number of white balls in the urn
pop_success = length(unique(ires_genes))
# number of black balls in the urn
total_space = unique(c(total_genes), ires_genes)
pop_fail = sum(! (total_space) %in% (ires_genes))
print("length of all genes")
print(length(total_space))
print("number of genes passing")
print(pop_success)
print("number of genes failing")
print(pop_fail)
samp_success = sum(ranked_genes[c(1:samp_size)] %in% ires_genes)
print("IRES genes in enrich")
print(ranked_genes[which(ranked_genes[c(1:samp_size)] %in% ires_genes)] )
curr_padj = phyper(samp_success, pop_success, pop_fail, samp_size, lower.tail = FALSE)
enrichment = (samp_success/samp_size) / (pop_success/length(total_genes))
min_pval = c(enrichment, curr_padj, samp_success, samp_size)
print(min_pval)
print(c(samp_success, pop_success, pop_fail, samp_size))
names(min_pval) = c("enrichment", "pval", "samp_success", "samp_size")
min_pval = c(min_pval, ranked_genes[which(ranked_genes[c(1:samp_size)] %in% ires_genes)])
return(min_pval)
}
plot_utr_length <- function(seq_df, outname){
# run regression
seq_df$log2_TE_FC = seq_df$log2FC_TE.DrugTreated.vs.Control.
a = summary(lm(utr5_length ~ log2_TE_FC, data=seq_df))
corr_pval_utr5 = round(a$coefficients[2,4], 2)
a = summary(lm(utr3_length ~ log2_TE_FC, data=seq_df))
corr_pval_utr3 = round(a$coefficients[2,4],2)
pdf(paste(outname, "_utr_len.pdf", sep=""))
gg5 = ggplot(seq_df, aes(x=utr5_length, y=-1*log10(padj))) +
geom_point() +
geom_smooth(method='lm',formula=y~x, se=T) +
annotate("text", x = 2500, y = 2, label = paste("p-val: ", corr_pval_utr5, sep="")) +
theme_bw() + ggtitle("Correlation between 5'UTR and log2FC TE")
gg3 = ggplot(seq_df, aes(x=utr3_length, y=-1*log10(padj))) +
geom_point() +
geom_smooth(method='lm',formula=y~x, se=T)+
annotate("text", x = 2500, y = 2, label = paste("p-val: ", corr_pval_utr3, sep="")) +
theme_bw() + ggtitle("Correlation between 3'UTR and log2FC TE")
gg_all = grid.arrange(gg5, gg3)
print(gg_all)
dev.off()
}
get_seq_table <- function(res_table){
# get the sequences
bm <- useMart("ENSEMBL_MART_ENSEMBL", host="www.ensembl.org")
bm <- useDataset("mmusculus_gene_ensembl", mart=bm)
utr3_tab = getSequence(seqType='3utr',mart=bm,type="ensembl_gene_id",id=res_table$ensembl_gene_id[which(res_table$padj < 0.9999)])
utr5_tab = getSequence(seqType='5utr',mart=bm,type="ensembl_gene_id",id=res_table$ensembl_gene_id[which(res_table$padj < 0.9999)])
# format the sequences
colnames(utr3_tab)[1] = "utr3"
utr3_tab$utr3_length = nchar(utr3_tab$utr3, type = "chars", allowNA = FALSE, keepNA = NA)
utr3_tab = utr3_tab[order(utr3_tab$utr3_length, decreasing=T),]
utr3_tab = utr3_tab[which(utr3_tab$utr3 != "Sequence unavailable"),]
utr3_tab = utr3_tab[which(!duplicated(utr3_tab$ensembl_gene_id)),]
colnames(utr5_tab)[1] = "utr5"
utr5_tab$utr5_length = nchar(utr5_tab$utr5, type = "chars", allowNA = FALSE, keepNA = NA)
utr5_tab = utr5_tab[order(utr5_tab$utr5_length, decreasing=T),]
utr5_tab = utr5_tab[which(utr5_tab$utr5 != "Sequence unavailable"),]
utr5_tab = utr5_tab[which(!duplicated(utr5_tab$ensembl_gene_id)),]
# merge them together
merge_tab = merge(res_table, utr5_tab, by="ensembl_gene_id", all.x=TRUE)
merge_tab = merge(merge_tab, utr3_tab, by="ensembl_gene_id", all.x=TRUE)
return(merge_tab)
}
library(data.table)
library(ggplot2)
library(biomaRt)
library(gridExtra)
remove.packages("bit", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("bit", lib="~/Library/R/4.0/library")
install.packages("bit")
library(biomaRt)
